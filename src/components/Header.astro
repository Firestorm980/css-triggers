---
import SearchForm from "@components/SearchForm.astro";
import Icon from "./Icon.astro";

const base = import.meta.env.BASE_URL
---
<header class="site-header">
	<button type="button" class="site-header__button site-header__button--menu" id="site-header-button-menu">
		<span class="screen-reader-text">Menu</span>
		<Icon name="menu" />
	</button>
	<a class="site-logo" href={base} aria-label="CSS Triggers">
		{'{}'}
		<span class="site-logo__text">
			Triggers
		</span>
	</a>
	<SearchForm />
</header>
<style is:global>
	.site-header {
		align-items: center;
		background-color: var(--site-header-background);
		box-shadow: 0 0 0.5em var(--site-accent);
		display: flex;
		gap: 1em;
		grid-area: header-top;
		height: var(--site-header-height);
		justify-content: space-between;
		padding: var(--spacing-default);
		position: sticky;
		top: 0;
		z-index: 1;
	}

	.site-logo {
		background-clip: text;
		background-color: var(--site-color);
		background-image: linear-gradient(to right, var(--color-purple) 0%, var(--color-olive) 50%, var(--color-green) 100%);
		color: transparent;
		font-size: 1.75em;
		font-weight: 700;
		margin-inline-end: auto;
		text-decoration: none;
	}

	.site-logo__text {
		@media (width <= 42em) {
			display: none;
		}
	}

	.site-header__button--menu {
		@media (width >= 42em) {
			display: none;
		}
	}
</style>
<script>
	const mq = window.matchMedia('(width <= 42em)');
	const siteSidebarInner = document.getElementById('site-sidebar-inner');
	const siteHeaderButtonMenu = document.getElementById('site-header-button-menu');

	const closeSidebar = (isKeyboard = false) => {
		siteSidebarInner.setAttribute('aria-hidden', 'true')
		siteSidebarInner.setAttribute('data-open', 'false');
		siteSidebarInner.setAttribute('inert', '');
		siteHeaderButtonMenu.setAttribute('aria-expanded', 'false');

		if (isKeyboard) {
			siteHeaderButtonMenu.focus();
		}
	};

	const openSidebar = (isKeyboard = false) => {
		siteSidebarInner.setAttribute('aria-hidden', 'false')
		siteSidebarInner.setAttribute('data-open', 'true');
		siteSidebarInner.removeAttribute('inert');
		siteHeaderButtonMenu.setAttribute('aria-expanded', 'true');

		if (isKeyboard) {
			const element = siteSidebarInner.querySelector('a, button') as HTMLElement;
			element.focus();
		}
	};

	const mediaQueryChange = () => {
		if (mq.matches) {
			closeSidebar();
		} else {
			openSidebar();
		}
	};

	const handleSiteHeaderButtonMenuClick = (event) => {
		const isKeyboard = event.detail === 0;

		event.stopPropagation();

		if (siteSidebarInner.getAttribute('data-open') === 'true') {
			closeSidebar(isKeyboard);
		} else {
			openSidebar(isKeyboard);
		}
	};

	const handleSiteSidebarInnerKeydown = (event) => {
		const isEscape = event.key === 'Escape';
		const isTab = event.key === 'Tab';
		const isShift = event.shiftKey;

		if (isEscape) {
			closeSidebar(true);
			return;
		}
	};

	const handleSiteSidebarInnerClick = (event) => {
		event.stopPropagation();
	};

	const handleDocumentClick = () => {
		if (!mq.matches) {
			return;
		}
		closeSidebar();
	};

	const setup = () => {
		mediaQueryChange();

		siteHeaderButtonMenu.setAttribute('aria-controls', 'site-sidebar');
	};

	const bind = () => {
		mq.addEventListener('change', mediaQueryChange);
		siteHeaderButtonMenu.addEventListener('click', handleSiteHeaderButtonMenuClick);
		siteSidebarInner.addEventListener('keydown', handleSiteSidebarInnerKeydown);
		siteSidebarInner.addEventListener('click', handleSiteSidebarInnerClick);
		document.addEventListener('click', handleDocumentClick);
	};

	setup();
	bind();
</script>
